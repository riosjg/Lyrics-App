{"version":3,"sources":["components/Form.js","components/Song.js","components/Info.js","App.js","serviceWorker.js","index.js"],"names":["Form","setLyricSearch","useState","artist","song","search","setSearch","error","setError","updateState","e","target","name","value","className","onSubmit","preventDefault","trim","onChange","type","placeholder","Song","lyric","length","Info","info","Object","keys","strArtistThumb","strGenre","strBiographyEN","src","alt","href","strFacebook","rel","strTwitter","strLastFMChart","App","lyricSearch","setLyric","setInfo","useEffect","a","url","url2","Promise","all","Axios","lyrics","data","artists","fetchData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"2QAoFeA,EAlFF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,eAAoB,EACHC,mBAAS,CACjCC,OAAQ,GACRC,KAAM,KAHqB,mBACxBC,EADwB,KAChBC,EADgB,OAKLJ,oBAAS,GALJ,mBAKxBK,EALwB,KAKjBC,EALiB,KAOxBL,EAAgBE,EAAhBF,OAAQC,EAAQC,EAARD,KAETK,EAAc,SAAAC,GAChBJ,EAAU,2BACHD,GADE,kBAEJK,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAclC,OACI,yBAAKC,UAAU,WACDP,EAAQ,uBAAGO,UAAU,sCAAb,kCAAuF,KACzG,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,0BACIC,SAhBD,SAAAL,GACfA,EAAEM,iBACmB,KAAlBb,EAAOc,QAAiC,KAAhBb,EAAKa,QAIhCT,GAAS,GACTP,EAAeI,IAJXG,GAAS,IAcGM,UAAU,qDAEV,kCACI,4BAAQA,UAAU,eAAlB,iBAEA,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,cACX,yCACA,2BACII,SAAUT,EACVU,KAAK,OACLL,UAAU,eACVF,KAAK,SACLQ,YAAY,gBACZP,MAAOV,MAInB,yBAAKW,UAAU,YACX,yBAAKA,UAAU,cACX,uCACA,2BACII,SAAUT,EACVU,KAAK,OACLL,UAAU,eACVF,KAAK,OACLQ,YAAY,cACZP,MAAOT,OAMvB,4BACIe,KAAK,SACLL,UAAU,+BAFd,gBCxDbO,EAXF,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACX,OAAoB,IAAjBA,EAAMC,OAAqB,KAE1B,oCACI,sCACA,uBAAGT,UAAU,SAASQ,KC0BnBE,EA/BF,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACX,GAAiC,IAA7BC,OAAOC,KAAKF,GAAMF,OAAc,OAAO,KADtB,IAGbK,EAA4CH,EAA5CG,eAAgBC,EAA4BJ,EAA5BI,SAAUC,EAAkBL,EAAlBK,eAElC,OACI,yBAAKhB,UAAU,qBACX,yBAAKA,UAAU,sDAAf,wBAGA,yBAAKA,UAAU,aACX,yBAAKiB,IAAKH,EAAgBI,IAAI,kBAC9B,uBAAGlB,UAAU,aAAb,UAAiCe,GACjC,wBAAIf,UAAU,aAAd,eACA,uBAAGA,UAAU,aAAagB,GAC1B,uBAAGhB,UAAU,aACb,uBAAGmB,KAAI,kBAAaR,EAAKS,aAAevB,OAAO,SAASwB,IAAI,uBACxD,uBAAGrB,UAAU,qBAEjB,uBAAGmB,KAAI,kBAAaR,EAAKW,YAAczB,OAAO,SAASwB,IAAI,uBACvD,uBAAGrB,UAAU,oBAEjB,uBAAGmB,KAAI,UAAKR,EAAKY,gBAAkB1B,OAAO,SAASwB,IAAI,uBACnD,uBAAGrB,UAAU,uBCyBlBwB,MA5Cf,WAAgB,IAAD,EAC2BpC,mBAAS,IADpC,mBACLqC,EADK,KACQtC,EADR,OAEeC,mBAAS,IAFxB,mBAELoB,EAFK,KAEEkB,EAFF,OAGatC,mBAAS,IAHtB,mBAGLuB,EAHK,KAGCgB,EAHD,KAoBb,OAfAC,qBAAW,WAC8B,IAApChB,OAAOC,KAAKY,GAAahB,QACb,uCAAG,0CAAAoB,EAAA,6DACRxC,EAAiBoC,EAAjBpC,OAAQC,EAASmC,EAATnC,KACVwC,EAFU,oCAEyBzC,EAFzB,YAEmCC,GAC7CyC,EAHU,4DAGkD1C,GAHlD,SAIa2C,QAAQC,IAAI,CACvCC,IAAMJ,GACNI,IAAMH,KANQ,mCAITI,EAJS,KAIDxB,EAJC,KAQhBe,EAASS,EAAOC,KAAKD,QACrBR,EAAQhB,EAAKyB,KAAKC,QAAQ,IATV,4CAAH,oDAWfC,KACC,CAACb,EAAad,IAEf,oCACA,kBAAC,EAAD,CACExB,eAAgBA,IAGlB,yBAAKa,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,kBAAC,EAAD,CACEW,KAAMA,KAGV,yBAAKX,UAAU,YACb,kBAAC,EAAD,CACEQ,MAAOA,SC7BC+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9D,GACL+D,QAAQ/D,MAAMA,EAAMgE,c","file":"static/js/main.370eb9cf.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst Form = ({setLyricSearch}) => {\r\n    const [search, setSearch] = useState({\r\n        artist: '',\r\n        song: ''\r\n    });\r\n    const [error, setError] = useState(false);\r\n\r\n    const {artist, song} = search;\r\n\r\n    const updateState = e => {\r\n        setSearch({\r\n            ...search,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const searchInfo = e => {\r\n        e.preventDefault();\r\n        if(artist.trim() === '' || song.trim() === ''){\r\n            setError(true);\r\n            return;\r\n        }\r\n        setError(false);\r\n        setLyricSearch(search);\r\n    }\r\n\r\n    return ( \r\n        <div className=\"bg-info\">\r\n                    { error ? <p className=\"alert alert-danger text-center p-2\">Every field must be completed.</p> : null}\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <form\r\n                        onSubmit={searchInfo}\r\n                        className=\"col card text-white bg-transparent mb-5 pt-5 pb-2\"\r\n                    >\r\n                        <fieldset>\r\n                            <legend className=\"text-center\">Lyrics Finder</legend>\r\n\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-6\">\r\n                                    <div className=\"form-group\">\r\n                                        <label>Artist</label>\r\n                                        <input\r\n                                            onChange={updateState}\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            name=\"artist\"\r\n                                            placeholder=\"Artist's name\"\r\n                                            value={artist}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-md-6\">\r\n                                    <div className=\"form-group\">\r\n                                        <label>Song</label>\r\n                                        <input\r\n                                            onChange={updateState}\r\n                                            type=\"text\"\r\n                                            className=\"form-control\"\r\n                                            name=\"song\"\r\n                                            placeholder=\"Song's name\"\r\n                                            value={song}\r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <button\r\n                                type=\"submit\"\r\n                                className=\"btn btn-primary float-right\"\r\n                            >Search</button>\r\n                        </fieldset>\r\n                    </form>\r\n\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Form;","import React from 'react';\r\n\r\nconst Song = ({lyric}) => {\r\n    if(lyric.length === 0) return null;\r\n    return(\r\n        <>\r\n            <h2>Lyrics</h2>\r\n            <p className=\"lyric\">{lyric}</p>\r\n        </>\r\n    );\r\n}\r\n\r\n \r\nexport default Song;","import React from 'react';\r\n\r\nconst Info = ({info}) => {\r\n    if (Object.keys(info).length === 0) return null;\r\n\r\n    const { strArtistThumb, strGenre, strBiographyEN} = info;\r\n\r\n    return ( \r\n        <div className=\"card border-light\">\r\n            <div className=\"card-header bg-primary text-light font-weight-bold\">\r\n                Artist's information\r\n            </div>\r\n            <div className=\"card-body\">\r\n                <img src={strArtistThumb} alt=\"Artist's Logo\"/>\r\n                <p className=\"card-text\">Genre: {strGenre}</p>\r\n                <h2 className=\"card-text\">Biography: </h2>\r\n                <p className=\"card-text\">{strBiographyEN}</p>\r\n                <p className=\"card-text\">\r\n                <a href={`https://${info.strFacebook}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    <i className=\"fab fa-facebook\"></i>\r\n                </a>\r\n                <a href={`https://${info.strTwitter}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    <i className=\"fab fa-twitter\"></i>\r\n                </a>\r\n                <a href={`${info.strLastFMChart}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                    <i className=\"fab fa-lastfm\"></i>\r\n                </a>\r\n                </p>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Info;","import React, { useState, useEffect } from 'react';\nimport Axios from 'axios';\nimport Form from './components/Form';\nimport Song from './components/Song';\nimport Info from './components/Info';\n\nfunction App() {\n  const [ lyricSearch, setLyricSearch ] = useState({});\n  const [ lyric, setLyric ] = useState('');\n  const [ info, setInfo ] = useState({});\n\n  useEffect( () => {\n    if(Object.keys(lyricSearch).length === 0) return;\n    const fetchData = async () => {\n      const { artist, song } = lyricSearch;\n      const url = `https://api.lyrics.ovh/v1/${artist}/${song}`;\n      const url2 = `https://theaudiodb.com/api/v1/json/1/search.php?s=${artist}`;\n      const [lyrics, info] = await Promise.all([\n        Axios(url),\n        Axios(url2)\n      ])\n      setLyric(lyrics.data.lyrics);\n      setInfo(info.data.artists[0]);\n    }\n    fetchData();\n  }, [lyricSearch, info])\n  return (\n    <>\n    <Form \n      setLyricSearch={setLyricSearch}\n    />\n\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-md-6\">\n          <Info\n            info={info}\n          />\n        </div>\n        <div className=\"col-md-6\">\n          <Song\n            lyric={lyric}\n          />\n        </div>\n      </div>\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}